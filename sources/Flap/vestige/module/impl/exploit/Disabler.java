package vestige.module.impl.exploit;

import java.io.IOException;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Random;
import net.minecraft.client.Minecraft;
import net.minecraft.client.entity.EntityOtherPlayerMP;
import net.minecraft.client.renderer.WorldRenderer;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0CPacketInput;
import net.minecraft.network.play.client.C0DPacketCloseWindow;
import net.minecraft.network.play.client.C0EPacketClickWindow;
import net.minecraft.network.play.client.C16PacketClientStatus;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.network.play.server.S42PacketCombatEvent;
import net.minecraft.world.World;
import vestige.Flap;
import vestige.event.Listener;
import vestige.event.impl.MotionEvent;
import vestige.event.impl.PacketReceiveEvent;
import vestige.event.impl.PacketSendEvent;
import vestige.event.impl.PreMotionEvent;
import vestige.event.impl.RenderEvent;
import vestige.event.impl.TickEvent;
import vestige.event.impl.UpdateEvent;
import vestige.event.impl.WorldChangeEvent;
import vestige.font.VestigeFontRenderer;
import vestige.module.Category;
import vestige.module.Module;
import vestige.module.impl.client.NotificationManager;
import vestige.module.impl.movement.Fly;
import vestige.module.impl.movement.Speed;
import vestige.module.impl.visual.ClientTheme;
import vestige.setting.AbstractSetting;
import vestige.setting.impl.BooleanSetting;
import vestige.setting.impl.DoubleSetting;
import vestige.setting.impl.IntegerSetting;
import vestige.setting.impl.ModeSetting;
import vestige.util.misc.TimerUtil;
import vestige.util.network.PacketUtil;
import vestige.util.player.PlayerUtil;
import vestige.util.render.RenderUtils2;
import vestige.util.util.MathUtils;
import vestige.util.util.Utils;

public class Disabler extends Module {
   Random random = new Random();
   private final ModeSetting mode = new ModeSetting("Mode", "Pingspoof", new String[]{"Watchdog", "Ghostly", "Custom"});
   private final BooleanSetting strict = new BooleanSetting("Strict", () -> {
      return this.mode.is("Watchdog strafe silent");
   }, false);
   private final IntegerSetting blinkTicks = new IntegerSetting("Blink ticks", () -> {
      return this.mode.is("Watchdog strafe silent");
   }, 10, 3, 14, 1);
   private final IntegerSetting delay = new IntegerSetting("Delay", () -> {
      return this.mode.is("Pingspoof");
   }, 500, 50, 4000, 50);
   private final BooleanSetting s08 = new BooleanSetting("S08", () -> {
      return this.mode.is("Pingspoof");
   }, false);
   private final BooleanSetting balance = new BooleanSetting("Balance", () -> {
      return this.mode.is("Custom");
   }, true);
   private final BooleanSetting noSprint = new BooleanSetting("No Sprint", () -> {
      return this.mode.is("Custom");
   }, false);
   private final BooleanSetting noSneak = new BooleanSetting("No Sneak", () -> {
      return this.mode.is("Custom");
   }, false);
   private final BooleanSetting motiochecks = new BooleanSetting("Disable Motion Checks", () -> {
      return this.mode.is("Watchdog");
   }, true);
   private final BooleanSetting inventorydisabler = new BooleanSetting("Disable Inventory Checks", () -> {
      return this.mode.is("Watchdog");
   }, false);
   private final BooleanSetting lobbycheck = new BooleanSetting("Lobby Check", () -> {
      return this.mode.is("Watchdog");
   }, true);
   private final BooleanSetting silentTeleportAccept = new BooleanSetting("Silent teleport accept", () -> {
      return this.mode.is("Custom");
   }, false);
   private final DoubleSetting silentRange = new DoubleSetting("Silent range", () -> {
      return this.mode.is("Custom") && this.silentTeleportAccept.isEnabled();
   }, 8.0D, 0.25D, 20.0D, 0.25D);
   private Speed speedModule;
   private Fly fly;
   private final TimerUtil timer = new TimerUtil();
   private final ArrayList<Packet> packetsQueue = new ArrayList();
   private boolean started;
   private int groundSpoofTicks;
   private int ticks;
   private boolean transaction = false;
   private boolean isOnCombat = false;
   boolean c09 = false;
   boolean c08 = false;
   boolean c07 = false;
   boolean shouldSend = false;
   private int flagged;
   private int offGroundTicks = 0;
   private static boolean isFinished = false;
   private Integer op;
   private boolean oq;
   private boolean fk;
   private int offGroundTick2 = 0;
   private double lastX;
   private double lastY;
   private double lastZ;
   private float lastYaw;
   private float lastPitch;
   private boolean onGround;
   private long lastUpdate = System.currentTimeMillis();
   private final long updateInterval = 1000L;
   private double lastPosX;
   private double lastPosY;
   private double lastPosZ;
   private EntityOtherPlayerMP cloneNPC = null;
   int count = 0;
   Queue<Packet> packets = new LinkedList();
   private double motionX;
   private double motionZ;
   private double lastMotionX;
   private double lastMotionZ;
   private boolean oninv = false;
   private boolean oninv2 = false;
   private boolean blinking;
   private final Minecraft mc = Minecraft.getMinecraft();
   private boolean positionModified = false;
   Object localObject;
   private VestigeFontRenderer productSans;
   private ClientTheme theme;

   public Disabler() {
      super("Disabler", Category.ULTILITY);
      this.addSettings(new AbstractSetting[]{this.mode, this.strict, this.blinkTicks, this.delay, this.s08, this.balance, this.noSprint, this.noSneak, this.silentTeleportAccept, this.silentRange, this.motiochecks, this.lobbycheck, this.inventorydisabler});
   }

   public void onEnable() {
      this.started = false;
      this.groundSpoofTicks = this.ticks = 0;
   }

   public boolean onDisable() {
      if (!this.packetsQueue.isEmpty()) {
         Iterator var1 = this.packetsQueue.iterator();

         while(var1.hasNext()) {
            Packet packet = (Packet)var1.next();
            PacketUtil.sendPacketNoEvent(packet);
         }

         isFinished = false;
         this.packetsQueue.clear();
      }

      isFinished = false;
      this.flagged = 0;
      Flap.instance.getPacketBlinkHandler().stopAll();
      Flap.instance.getPacketDelayHandler().stopAll();
      return false;
   }

   public void onClientStarted() {
      this.speedModule = (Speed)Flap.instance.getModuleManager().getModule(Speed.class);
   }

   public void onAttack(S42PacketCombatEvent event) {
      this.isOnCombat = true;
   }

   public void onWorld(World event) {
      this.isOnCombat = false;
   }

   @Listener
   public void onWorld(WorldRenderer event) {
      System.out.print("[FLAP] Disabler Hypixel");
      this.packets.clear();
      this.ticks = 0;
   }

   @Listener
   public void onWorldChange(WorldChangeEvent event) {
      isFinished = false;
      this.flagged = 0;
   }

   @Listener
   public void onPreMotion(PreMotionEvent event) {
      String var2 = this.mode.getMode();
      byte var3 = -1;
      switch(var2.hashCode()) {
      case 609795629:
         if (var2.equals("Watchdog")) {
            var3 = 0;
         }
      }

      switch(var3) {
      case 0:
         if (this.motiochecks.isEnabled() && (!this.lobbycheck.isEnabled() || !Utils.isLobby())) {
            if (isFinished || !PlayerUtil.nullCheck() || this.mc.thePlayer.ticksExisted < 20) {
               return;
            }

            if (this.mc.thePlayer.onGround) {
               if (!Utils.jumpDown()) {
                  this.mc.thePlayer.jump();
               }
            } else if (this.offGroundTicks >= 9) {
               if (this.offGroundTicks % 2 == 0) {
                  this.mc.thePlayer.posX = event.getPosX() + Utils.randomizeDouble(0.09D, 0.12D);
               }

               this.mc.thePlayer.motionX = this.mc.thePlayer.motionY = this.mc.thePlayer.motionZ = 0.0D;
            }
         }
      }

   }

   @Listener
   public void onTick(TickEvent event) {
      if (this.mode.getMode() == "Watchdog") {
      }

   }

   @Listener
   public void onReceive(PacketReceiveEvent event) {
      String var2 = this.mode.getMode();
      byte var3 = -1;
      switch(var2.hashCode()) {
      case 609795629:
         if (var2.equals("Watchdog")) {
            var3 = 2;
         }
         break;
      case 1643633847:
         if (var2.equals("Pingspoof")) {
            var3 = 0;
         }
         break;
      case 2029746065:
         if (var2.equals("Custom")) {
            var3 = 1;
         }
      }

      switch(var3) {
      case 0:
         if (this.s08.isEnabled()) {
            Flap.instance.getPacketBlinkHandler().startBlinkingAll();
            this.blinking = true;
            this.timer.reset();
         }
         break;
      case 1:
         if (event.getPacket() instanceof S08PacketPlayerPosLook) {
            S08PacketPlayerPosLook packet = (S08PacketPlayerPosLook)event.getPacket();
            if (this.silentTeleportAccept.isEnabled() && this.mc.getNetHandler().doneLoadingTerrain && this.mc.thePlayer.getDistance(packet.getX(), packet.getY(), packet.getZ()) < this.silentRange.getValue()) {
               event.setCancelled(true);
               PacketUtil.sendPacket(new C03PacketPlayer.C06PacketPlayerPosLook(packet.getX(), packet.getY(), packet.getZ(), packet.getYaw(), packet.getPitch(), false));
            }
         }
         break;
      case 2:
         if (this.motiochecks.isEnabled() && (!this.lobbycheck.isEnabled() || !Utils.isLobby()) && event.getPacket() instanceof S08PacketPlayerPosLook && !isFinished) {
            ++this.flagged;
            if (this.flagged == 20) {
               isFinished = true;
               this.flagged = 0;
               NotificationManager.showNotification("Disabler", "Motion Checks Disabled.", NotificationManager.NotificationType.WARNING, 2L);
               isFinished = true;
            }
         }
      }

   }

   @Listener
   public void onSend(PacketSendEvent event) throws IOException {
      if (this.mc.thePlayer != null) {
         String var2 = this.mode.getMode();
         byte var3 = -1;
         switch(var2.hashCode()) {
         case 609795629:
            if (var2.equals("Watchdog")) {
               var3 = 1;
            }
            break;
         case 1643633847:
            if (var2.equals("Pingspoof")) {
               var3 = 3;
            }
            break;
         case 1671735356:
            if (var2.equals("Ghostly")) {
               var3 = 2;
            }
            break;
         case 2029746065:
            if (var2.equals("Custom")) {
               var3 = 0;
            }
         }

         switch(var3) {
         case 0:
            if (this.balance.isEnabled() && event.getPacket() instanceof C03PacketPlayer) {
               C03PacketPlayer packet = (C03PacketPlayer)event.getPacket();
               if (!packet.isMoving() && !packet.getRotating() && this.mc.thePlayer.posX - this.mc.thePlayer.lastTickPosX == 0.0D && this.mc.thePlayer.posY - this.mc.thePlayer.lastTickPosY == 0.0D && this.mc.thePlayer.posZ - this.mc.thePlayer.lastTickPosZ == 0.0D) {
                  event.setCancelled(true);
               }
            }
            break;
         case 1:
            if (this.inventorydisabler.isEnabled()) {
               if (!(event.getPacket() instanceof C16PacketClientStatus) && !(event.getPacket() instanceof C0EPacketClickWindow)) {
                  if (event.getPacket() instanceof C0DPacketCloseWindow && !this.packetsQueue.isEmpty()) {
                     Iterator var10 = this.packetsQueue.iterator();

                     while(var10.hasNext()) {
                        Packet packeti = (Packet)var10.next();
                        PacketUtil.sendPacketNoEvent(packeti);
                     }

                     this.packetsQueue.clear();
                  }
               } else {
                  event.setCancelled(true);
                  this.packetsQueue.add(event.getPacket());
               }
            }
            break;
         case 2:
            Packet<?> packete = event.getPacket();
            if (packete instanceof C03PacketPlayer) {
               PacketUtil.sendPacketNoEvent(new C0CPacketInput());
               C03PacketPlayer wrapper = (C03PacketPlayer)packete;
               wrapper.y = (double)Math.round(wrapper.y / 0.015625D) * 0.015625D;
               wrapper.onGround = true;
               event.setPacket(wrapper);
            }
            break;
         case 3:
            if (event.getPacket() instanceof C00PacketKeepAlive) {
               try {
                  Field keyField = C00PacketKeepAlive.class.getDeclaredField("key");
                  keyField.setAccessible(true);
                  C00PacketKeepAlive keepAlivePacket = (C00PacketKeepAlive)event.getPacket();
                  int keyValue = keyField.getInt(keepAlivePacket);
                  int randomValue = this.random.nextInt(2147482648) + 1000;
                  keyValue -= randomValue;
                  keyField.setInt(keepAlivePacket, keyValue);
               } catch (IllegalAccessException | NoSuchFieldException var9) {
                  var9.printStackTrace();
               }
            }
         }

      }
   }

   public String getInfo() {
      return this.mode.getMode();
   }

   @Listener
   public void onMotion(MotionEvent event) {
   }

   @Listener
   public void onUpdate(UpdateEvent event) {
      if (this.mc.thePlayer.onGround) {
         this.offGroundTicks = 0;
         this.offGroundTick2 = 0;
      } else {
         ++this.offGroundTick2;
         ++this.offGroundTicks;
      }

   }

   @Listener
   public void onRender(RenderEvent event) {
      this.theme = (ClientTheme)Flap.instance.getModuleManager().getModule(ClientTheme.class);
      this.productSans = Flap.instance.getFontManager().getProductSans();
      if (this.mode.is("Watchdog") && !isFinished && (!this.lobbycheck.isEnabled() || !Utils.isLobby())) {
         float percentage = (float)MathUtils.toPercentage((double)this.flagged, 20.0D);
         RenderUtils2.drawProgressBar(130, 10, percentage, this.theme.getColortocolor(1), -1, false, 1, true, "Disabling Motion Checks", -1);
      }

   }

   @Listener
   public void onPacketSend(PacketSendEvent event) {
   }

   public boolean isMoving() {
      return this.mc.thePlayer != null && (this.mc.thePlayer.movementInput.moveForward != 0.0F || this.mc.thePlayer.movementInput.moveStrafe != 0.0F);
   }
}
