package vestige.module.impl.exploit;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;
import java.io.IOException;
import net.minecraft.network.PacketBuffer;
import net.minecraft.network.play.client.C17PacketCustomPayload;
import org.jetbrains.annotations.NotNull;
import vestige.event.Listener;
import vestige.event.impl.PacketSendEvent;
import vestige.module.Category;
import vestige.module.Module;
import vestige.setting.AbstractSetting;
import vestige.setting.impl.ModeSetting;

public class ClientSpoofer extends Module {
   private final ModeSetting mode = new ModeSetting("Mode", "Lunar", new String[]{"Forge", "Lunar", "Badlion", "CheatBreaker", "LabyMod"});

   public ClientSpoofer() {
      super("Spoofer", Category.ULTILITY);
      this.addSettings(new AbstractSetting[]{this.mode});
   }

   @Listener
   public void onPacketSend(@NotNull PacketSendEvent event) throws IOException {
      if (event == null) {
         $$$reportNull$$$0(0);
      }

      if (event.getPacket() instanceof C17PacketCustomPayload) {
         C17PacketCustomPayload packet = (C17PacketCustomPayload)event.getPacket();
         String data = "";
         boolean wrapped = true;
         String var5 = this.mode.getMode();
         byte var6 = -1;
         switch(var5.hashCode()) {
         case -1929927239:
            if (var5.equals("CheatBreaker")) {
               var6 = 3;
            }
            break;
         case 68066119:
            if (var5.equals("Forge")) {
               var6 = 1;
            }
            break;
         case 73781974:
            if (var5.equals("Lunar")) {
               var6 = 0;
            }
            break;
         case 1318402433:
            if (var5.equals("Badlion")) {
               var6 = 2;
            }
            break;
         case 1602017974:
            if (var5.equals("LabyMod")) {
               var6 = 4;
            }
         }

         switch(var6) {
         case 0:
            data = "lunarclient:v2.16.0-2426";
            break;
         case 1:
            data = "FML";
            break;
         case 2:
            data = "badlion";
            break;
         case 3:
            data = "CB";
            break;
         case 4:
            data = "LMC";
         }

         ByteBuf byteBuf = wrapped ? Unpooled.wrappedBuffer(data.getBytes()) : Unpooled.buffer();
         PacketBuffer buffer = wrapped ? new PacketBuffer(Unpooled.wrappedBuffer(byteBuf)) : (new PacketBuffer(byteBuf)).writeString(data);
         packet.writePacketData(buffer);
      }

   }

   public void onEnable() {
   }

   public boolean onDisable() {
      return false;
   }

   // $FF: synthetic method
   private static void $$$reportNull$$$0(int var0) {
      throw new IllegalArgumentException(String.format("Argument for @NotNull parameter '%s' of %s.%s must not be null", "event", "vestige/module/impl/exploit/ClientSpoofer", "onPacketSend"));
   }
}
